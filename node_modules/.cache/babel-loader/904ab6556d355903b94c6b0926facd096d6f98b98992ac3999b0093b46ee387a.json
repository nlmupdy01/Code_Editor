{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\Code_editor-html-css-js\\\\src\\\\Component\\\\CodeEditContainer.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SaveCom extends React.Component {\n  constructor(props) {\n    super(props);\n    const defaultFileType = \"json\";\n    this.fileNames = {\n      json: \"states.json\",\n      csv: \"states.csv\",\n      text: \"states.txt\"\n    };\n    this.state = {\n      fileType: defaultFileType,\n      fileDownloadUrl: null,\n      status: \"\",\n      data: [{\n        state: \"Arizona\",\n        electors: 11\n      }, {\n        state: \"Florida\",\n        electors: 29\n      }, {\n        state: \"Iowa\",\n        electors: 6\n      }, {\n        state: \"Michigan\",\n        electors: 16\n      }, {\n        state: \"North Carolina\",\n        electors: 15\n      }, {\n        state: \"Ohio\",\n        electors: 18\n      }, {\n        state: \"Pennsylvania\",\n        electors: 20\n      }, {\n        state: \"Wisconsin\",\n        electors: 10\n      }]\n    };\n    this.changeFileType = this.changeFileType.bind(this);\n    this.download = this.download.bind(this);\n    this.upload = this.upload.bind(this);\n    this.openFile = this.openFile.bind(this);\n  }\n  changeFileType(event) {\n    const value = event.target.value;\n    this.setState({\n      fileType: value\n    });\n  }\n  download(event) {\n    event.preventDefault();\n    // Prepare the file\n    let output;\n    if (this.state.fileType === \"json\") {\n      output = JSON.stringify({\n        states: this.state.data\n      }, null, 4);\n    } else if (this.state.fileType === \"csv\") {\n      // Prepare data:\n      let contents = [];\n      contents.push([\"State\", \"Electors\"]);\n      this.state.data.forEach(row => {\n        contents.push([row.state, row.electors]);\n      });\n      output = this.makeCSV(contents);\n    } else if (this.state.fileType === \"text\") {\n      // Prepare data:\n      output = '';\n      this.state.data.forEach(row => {\n        output += `${row.state}: ${row.electors}\\n`;\n      });\n    }\n    // Download it\n    const blob = new Blob([output]);\n    const fileDownloadUrl = URL.createObjectURL(blob);\n    this.setState({\n      fileDownloadUrl: fileDownloadUrl\n    }, () => {\n      this.dofileDownload.click();\n      URL.revokeObjectURL(fileDownloadUrl); // free up storage--no longer needed.\n      this.setState({\n        fileDownloadUrl: \"\"\n      });\n    });\n  }\n\n  /**\r\n   * Function returns the content as a CSV string\r\n   * See https://stackoverflow.com/a/20623188/64904\r\n   * Parameter content:\r\n   *   [\r\n   *.     [header1, header2],\r\n   *.     [data1, data2]\r\n   *.     ...\r\n   *.  ]\r\n   * NB Does not support Date items\r\n   */\n  makeCSV(content) {\n    let csv = '';\n    content.forEach(value => {\n      value.forEach((item, i) => {\n        let innerValue = item === null ? '' : item.toString();\n        let result = innerValue.replace(/\"/g, '\"\"');\n        if (result.search(/(\"|,|\\n)/g) >= 0) {\n          result = '\"' + result + '\"';\n        }\n        if (i > 0) {\n          csv += ',';\n        }\n        csv += result;\n      });\n      csv += '\\n';\n    });\n    return csv;\n  }\n  upload() {\n    event.preventDefault();\n    this.dofileUpload.click();\n  }\n\n  /**\r\n   * Process the file within the React app. We're NOT uploading it to the server!\r\n   */\n  openFile(evt) {\n    let status = []; // Status output\n    const fileObj = evt.target.files[0];\n    const reader = new FileReader();\n    let fileloaded = e => {\n      // e.target.result is the file's content as text\n      const fileContents = e.target.result;\n      status.push(`File name: \"${fileObj.name}\". Length: ${fileContents.length} bytes.`);\n      // Show first 80 characters of the file\n      const first80char = fileContents.substring(0, 80);\n      status.push(`First 80 characters of the file:\\n${first80char}`);\n      this.setState({\n        status: status.join(\"\\n\")\n      });\n    };\n\n    // Mainline of the method\n    fileloaded = fileloaded.bind(this);\n    reader.onload = fileloaded;\n    reader.readAsText(fileObj);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"2020 US Swing States\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Electors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.data.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.electors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 38\n            }, this)]\n          }, item.state, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mr\",\n          children: \"File type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"fileType\",\n          onChange: this.changeFileType,\n          value: this.state.fileType,\n          className: \"mr\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"csv\",\n            children: \"CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"json\",\n            children: \"JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"text\",\n            children: \"Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.download,\n          children: \"Download the file!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"hidden\",\n          download: this.fileNames[this.state.fileType],\n          href: this.state.fileDownloadUrl,\n          ref: e => this.dofileDownload = e,\n          children: \"download it\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.upload,\n            children: \"Upload a file!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 16\n          }, this), \" Only json, csv, and text files are ok.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"hidden\",\n          multiple: false,\n          accept: \".json,.csv,.txt,.text,application/json,text/csv,text/plain\",\n          onChange: evt => this.openFile(evt),\n          ref: e => this.dofileUpload = e\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"status\",\n        children: this.state.status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this);\n  }\n}","map":{"version":3,"names":["SaveCom","React","Component","constructor","props","defaultFileType","fileNames","json","csv","text","state","fileType","fileDownloadUrl","status","data","electors","changeFileType","bind","download","upload","openFile","event","value","target","setState","preventDefault","output","JSON","stringify","states","contents","push","forEach","row","makeCSV","blob","Blob","URL","createObjectURL","dofileDownload","click","revokeObjectURL","content","item","i","innerValue","toString","result","replace","search","dofileUpload","evt","fileObj","files","reader","FileReader","fileloaded","e","fileContents","name","length","first80char","substring","join","onload","readAsText","render","map"],"sources":["C:/Users/pc/Desktop/Code_editor-html-css-js/src/Component/CodeEditContainer.jsx"],"sourcesContent":["class SaveCom extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      \r\n      const defaultFileType = \"json\"; \r\n      this.fileNames = {\r\n          json: \"states.json\",\r\n        csv: \"states.csv\",\r\n        text: \"states.txt\"\r\n      }    \r\n      this.state = {\r\n        fileType: defaultFileType,\r\n        fileDownloadUrl: null,\r\n        status: \"\",\r\n          data: [\r\n            { state: \"Arizona\",        electors: 11 },\r\n            { state: \"Florida\",        electors: 29 },\r\n            { state: \"Iowa\",           electors:  6 },\r\n            { state: \"Michigan\",       electors: 16 },\r\n            { state: \"North Carolina\", electors: 15 },\r\n            { state: \"Ohio\",           electors: 18 },\r\n            { state: \"Pennsylvania\",   electors: 20 },\r\n            { state: \"Wisconsin\",      electors: 10 },\r\n        ]\r\n      }\r\n        this.changeFileType = this.changeFileType.bind(this);\r\n        this.download = this.download.bind(this);\r\n        this.upload = this.upload.bind(this);\r\n        this.openFile = this.openFile.bind(this);\r\n    }\r\n    \r\n    changeFileType (event) {\r\n      const value = event.target.value;\r\n        this.setState({fileType: value});\r\n    }\r\n    \r\n    download (event) {\r\n      event.preventDefault();\r\n        // Prepare the file\r\n      let output;\r\n      if (this.state.fileType === \"json\") {\r\n          output = JSON.stringify({states: this.state.data}, \r\n            null, 4);\r\n      } else if (this.state.fileType === \"csv\"){\r\n        // Prepare data:\r\n        let contents = [];\r\n        contents.push ([\"State\", \"Electors\"]);\r\n        this.state.data.forEach(row => {\r\n            contents.push([row.state, row.electors])\r\n        });\r\n        output = this.makeCSV(contents);\r\n      } else if (this.state.fileType === \"text\"){\r\n        // Prepare data:\r\n        output = '';\r\n        this.state.data.forEach(row => {\r\n            output += `${row.state}: ${row.electors}\\n`\r\n        });\r\n      }\r\n      // Download it\r\n      const blob = new Blob([output]);\r\n      const fileDownloadUrl = URL.createObjectURL(blob);\r\n      this.setState ({fileDownloadUrl: fileDownloadUrl}, \r\n        () => {\r\n          this.dofileDownload.click(); \r\n          URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\r\n          this.setState({fileDownloadUrl: \"\"})\r\n      })    \r\n    }\r\n  \r\n    /**\r\n     * Function returns the content as a CSV string\r\n     * See https://stackoverflow.com/a/20623188/64904\r\n     * Parameter content:\r\n     *   [\r\n     *.     [header1, header2],\r\n     *.     [data1, data2]\r\n     *.     ...\r\n     *.  ]\r\n     * NB Does not support Date items\r\n     */\r\n    makeCSV (content) {\r\n        let csv = '';\r\n      content.forEach(value => {\r\n          value.forEach((item, i) => {\r\n          let innerValue = item === null ? '' : item.toString();\r\n          let result = innerValue.replace(/\"/g, '\"\"');\r\n          if (result.search(/(\"|,|\\n)/g) >= 0) {\r\n            result = '\"' + result + '\"'\r\n          }\r\n          if (i > 0) {csv += ','}\r\n          csv += result;\r\n        })\r\n          csv += '\\n';\r\n        })\r\n      return csv\r\n    }\r\n    \r\n    upload() {\r\n        event.preventDefault();\r\n      this.dofileUpload.click()\r\n    }\r\n    \r\n    /**\r\n     * Process the file within the React app. We're NOT uploading it to the server!\r\n     */\r\n    openFile(evt) {\r\n        let status = []; // Status output\r\n        const fileObj = evt.target.files[0];\r\n        const reader = new FileReader();\r\n            \r\n        let fileloaded = e => {\r\n          // e.target.result is the file's content as text\r\n          const fileContents = e.target.result;\r\n          status.push(`File name: \"${fileObj.name}\". Length: ${fileContents.length} bytes.`);\r\n          // Show first 80 characters of the file\r\n          const first80char = fileContents.substring(0,80);\r\n          status.push (`First 80 characters of the file:\\n${first80char}`)\r\n          this.setState ({status: status.join(\"\\n\")})\r\n        }\r\n        \r\n        // Mainline of the method\r\n        fileloaded = fileloaded.bind(this);\r\n        reader.onload = fileloaded;\r\n        reader.readAsText(fileObj);  \r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <div>\r\n          <h2>2020 US Swing States</h2>\r\n          <table>\r\n            <thead>\r\n            <tr><th>State</th><th>Electors</th></tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.state.data.map(item => (\r\n              <tr key={item.state}>\r\n                <td>{item.state}</td><td>{item.electors}</td>\r\n              </tr>\r\n            ))}          \r\n              </tbody>\r\n          </table>\r\n          <form>\r\n            <span className=\"mr\">File type:</span>\r\n            <select name=\"fileType\"\r\n              onChange={this.changeFileType}\r\n              value={this.state.fileType}\r\n              className=\"mr\"\r\n            >\r\n              <option value=\"csv\">CSV</option>\r\n              <option value=\"json\">JSON</option>\r\n              <option value=\"text\">Text</option>\r\n            </select>\r\n            \r\n            <button onClick={this.download}>\r\n              Download the file!\r\n            </button>\r\n            \r\n            <a className=\"hidden\"\r\n               download={this.fileNames[this.state.fileType]}\r\n               href={this.state.fileDownloadUrl}\r\n               ref={e=>this.dofileDownload = e}\r\n            >download it</a>\r\n            \r\n            <p><button onClick={this.upload}>\r\n              Upload a file!\r\n            </button> Only json, csv, and text files are ok.</p>\r\n  \r\n            <input type=\"file\" className=\"hidden\"\r\n              multiple={false}\r\n              accept=\".json,.csv,.txt,.text,application/json,text/csv,text/plain\"\r\n              onChange={evt => this.openFile(evt)}\r\n              ref={e=>this.dofileUpload = e}\r\n            />\r\n          </form>\r\n          <pre className=\"status\">{this.state.status}</pre>\r\n        </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n\r\n  "],"mappings":";;AAAA,MAAMA,OAAO,SAASC,KAAK,CAACC,SAAS,CAAC;EAClCC,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAEZ,MAAMC,eAAe,GAAG,MAAM;IAC9B,IAAI,CAACC,SAAS,GAAG;MACbC,IAAI,EAAE,aAAa;MACrBC,GAAG,EAAE,YAAY;MACjBC,IAAI,EAAE;IACR,CAAC;IACD,IAAI,CAACC,KAAK,GAAG;MACXC,QAAQ,EAAEN,eAAe;MACzBO,eAAe,EAAE,IAAI;MACrBC,MAAM,EAAE,EAAE;MACRC,IAAI,EAAE,CACJ;QAAEJ,KAAK,EAAE,SAAS;QAASK,QAAQ,EAAE;MAAG,CAAC,EACzC;QAAEL,KAAK,EAAE,SAAS;QAASK,QAAQ,EAAE;MAAG,CAAC,EACzC;QAAEL,KAAK,EAAE,MAAM;QAAYK,QAAQ,EAAG;MAAE,CAAC,EACzC;QAAEL,KAAK,EAAE,UAAU;QAAQK,QAAQ,EAAE;MAAG,CAAC,EACzC;QAAEL,KAAK,EAAE,gBAAgB;QAAEK,QAAQ,EAAE;MAAG,CAAC,EACzC;QAAEL,KAAK,EAAE,MAAM;QAAYK,QAAQ,EAAE;MAAG,CAAC,EACzC;QAAEL,KAAK,EAAE,cAAc;QAAIK,QAAQ,EAAE;MAAG,CAAC,EACzC;QAAEL,KAAK,EAAE,WAAW;QAAOK,QAAQ,EAAE;MAAG,CAAC;IAE/C,CAAC;IACC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACA,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;IACpD,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACD,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACF,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACG,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACH,IAAI,CAAC,IAAI,CAAC;EAC5C;EAEAD,cAAc,CAAEK,KAAK,EAAE;IACrB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAC9B,IAAI,CAACE,QAAQ,CAAC;MAACb,QAAQ,EAAEW;IAAK,CAAC,CAAC;EACpC;EAEAJ,QAAQ,CAAEG,KAAK,EAAE;IACfA,KAAK,CAACI,cAAc,EAAE;IACpB;IACF,IAAIC,MAAM;IACV,IAAI,IAAI,CAAChB,KAAK,CAACC,QAAQ,KAAK,MAAM,EAAE;MAChCe,MAAM,GAAGC,IAAI,CAACC,SAAS,CAAC;QAACC,MAAM,EAAE,IAAI,CAACnB,KAAK,CAACI;MAAI,CAAC,EAC/C,IAAI,EAAE,CAAC,CAAC;IACd,CAAC,MAAM,IAAI,IAAI,CAACJ,KAAK,CAACC,QAAQ,KAAK,KAAK,EAAC;MACvC;MACA,IAAImB,QAAQ,GAAG,EAAE;MACjBA,QAAQ,CAACC,IAAI,CAAE,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;MACrC,IAAI,CAACrB,KAAK,CAACI,IAAI,CAACkB,OAAO,CAACC,GAAG,IAAI;QAC3BH,QAAQ,CAACC,IAAI,CAAC,CAACE,GAAG,CAACvB,KAAK,EAAEuB,GAAG,CAAClB,QAAQ,CAAC,CAAC;MAC5C,CAAC,CAAC;MACFW,MAAM,GAAG,IAAI,CAACQ,OAAO,CAACJ,QAAQ,CAAC;IACjC,CAAC,MAAM,IAAI,IAAI,CAACpB,KAAK,CAACC,QAAQ,KAAK,MAAM,EAAC;MACxC;MACAe,MAAM,GAAG,EAAE;MACX,IAAI,CAAChB,KAAK,CAACI,IAAI,CAACkB,OAAO,CAACC,GAAG,IAAI;QAC3BP,MAAM,IAAK,GAAEO,GAAG,CAACvB,KAAM,KAAIuB,GAAG,CAAClB,QAAS,IAAG;MAC/C,CAAC,CAAC;IACJ;IACA;IACA,MAAMoB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACV,MAAM,CAAC,CAAC;IAC/B,MAAMd,eAAe,GAAGyB,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;IACjD,IAAI,CAACX,QAAQ,CAAE;MAACZ,eAAe,EAAEA;IAAe,CAAC,EAC/C,MAAM;MACJ,IAAI,CAAC2B,cAAc,CAACC,KAAK,EAAE;MAC3BH,GAAG,CAACI,eAAe,CAAC7B,eAAe,CAAC,CAAC,CAAE;MACvC,IAAI,CAACY,QAAQ,CAAC;QAACZ,eAAe,EAAE;MAAE,CAAC,CAAC;IACxC,CAAC,CAAC;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsB,OAAO,CAAEQ,OAAO,EAAE;IACd,IAAIlC,GAAG,GAAG,EAAE;IACdkC,OAAO,CAACV,OAAO,CAACV,KAAK,IAAI;MACrBA,KAAK,CAACU,OAAO,CAAC,CAACW,IAAI,EAAEC,CAAC,KAAK;QAC3B,IAAIC,UAAU,GAAGF,IAAI,KAAK,IAAI,GAAG,EAAE,GAAGA,IAAI,CAACG,QAAQ,EAAE;QACrD,IAAIC,MAAM,GAAGF,UAAU,CAACG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;QAC3C,IAAID,MAAM,CAACE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;UACnCF,MAAM,GAAG,GAAG,GAAGA,MAAM,GAAG,GAAG;QAC7B;QACA,IAAIH,CAAC,GAAG,CAAC,EAAE;UAACpC,GAAG,IAAI,GAAG;QAAA;QACtBA,GAAG,IAAIuC,MAAM;MACf,CAAC,CAAC;MACAvC,GAAG,IAAI,IAAI;IACb,CAAC,CAAC;IACJ,OAAOA,GAAG;EACZ;EAEAW,MAAM,GAAG;IACLE,KAAK,CAACI,cAAc,EAAE;IACxB,IAAI,CAACyB,YAAY,CAACV,KAAK,EAAE;EAC3B;;EAEA;AACJ;AACA;EACIpB,QAAQ,CAAC+B,GAAG,EAAE;IACV,IAAItC,MAAM,GAAG,EAAE,CAAC,CAAC;IACjB,MAAMuC,OAAO,GAAGD,GAAG,CAAC5B,MAAM,CAAC8B,KAAK,CAAC,CAAC,CAAC;IACnC,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;IAE/B,IAAIC,UAAU,GAAGC,CAAC,IAAI;MACpB;MACA,MAAMC,YAAY,GAAGD,CAAC,CAAClC,MAAM,CAACwB,MAAM;MACpClC,MAAM,CAACkB,IAAI,CAAE,eAAcqB,OAAO,CAACO,IAAK,cAAaD,YAAY,CAACE,MAAO,SAAQ,CAAC;MAClF;MACA,MAAMC,WAAW,GAAGH,YAAY,CAACI,SAAS,CAAC,CAAC,EAAC,EAAE,CAAC;MAChDjD,MAAM,CAACkB,IAAI,CAAG,qCAAoC8B,WAAY,EAAC,CAAC;MAChE,IAAI,CAACrC,QAAQ,CAAE;QAACX,MAAM,EAAEA,MAAM,CAACkD,IAAI,CAAC,IAAI;MAAC,CAAC,CAAC;IAC7C,CAAC;;IAED;IACAP,UAAU,GAAGA,UAAU,CAACvC,IAAI,CAAC,IAAI,CAAC;IAClCqC,MAAM,CAACU,MAAM,GAAGR,UAAU;IAC1BF,MAAM,CAACW,UAAU,CAACb,OAAO,CAAC;EAC9B;EAEAc,MAAM,GAAG;IACP,oBACE;MAAA,wBACE;QAAA,UAAI;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAK,eAC7B;QAAA,wBACE;UAAA,uBACA;YAAA,wBAAI;cAAA,UAAI;YAAK;cAAA;cAAA;cAAA;YAAA,QAAK;cAAA,UAAI;YAAQ;cAAA;cAAA;cAAA;YAAA,QAAK;UAAA;YAAA;YAAA;YAAA;UAAA;QAAK;UAAA;UAAA;UAAA;QAAA,QAChC,eACR;UAAA,UACC,IAAI,CAACxD,KAAK,CAACI,IAAI,CAACqD,GAAG,CAACxB,IAAI,iBACvB;YAAA,wBACE;cAAA,UAAKA,IAAI,CAACjC;YAAK;cAAA;cAAA;cAAA;YAAA,QAAM;cAAA,UAAKiC,IAAI,CAAC5B;YAAQ;cAAA;cAAA;cAAA;YAAA,QAAM;UAAA,GADtC4B,IAAI,CAACjC,KAAK;YAAA;YAAA;YAAA;UAAA,QAGpB;QAAC;UAAA;UAAA;UAAA;QAAA,QACQ;MAAA;QAAA;QAAA;QAAA;MAAA,QACJ,eACR;QAAA,wBACE;UAAM,SAAS,EAAC,IAAI;UAAA,UAAC;QAAU;UAAA;UAAA;UAAA;QAAA,QAAO,eACtC;UAAQ,IAAI,EAAC,UAAU;UACrB,QAAQ,EAAE,IAAI,CAACM,cAAe;UAC9B,KAAK,EAAE,IAAI,CAACN,KAAK,CAACC,QAAS;UAC3B,SAAS,EAAC,IAAI;UAAA,wBAEd;YAAQ,KAAK,EAAC,KAAK;YAAA,UAAC;UAAG;YAAA;YAAA;YAAA;UAAA,QAAS,eAChC;YAAQ,KAAK,EAAC,MAAM;YAAA,UAAC;UAAI;YAAA;YAAA;YAAA;UAAA,QAAS,eAClC;YAAQ,KAAK,EAAC,MAAM;YAAA,UAAC;UAAI;YAAA;YAAA;YAAA;UAAA,QAAS;QAAA;UAAA;UAAA;UAAA;QAAA,QAC3B,eAET;UAAQ,OAAO,EAAE,IAAI,CAACO,QAAS;UAAA,UAAC;QAEhC;UAAA;UAAA;UAAA;QAAA,QAAS,eAET;UAAG,SAAS,EAAC,QAAQ;UAClB,QAAQ,EAAE,IAAI,CAACZ,SAAS,CAAC,IAAI,CAACI,KAAK,CAACC,QAAQ,CAAE;UAC9C,IAAI,EAAE,IAAI,CAACD,KAAK,CAACE,eAAgB;UACjC,GAAG,EAAE6C,CAAC,IAAE,IAAI,CAAClB,cAAc,GAAGkB,CAAE;UAAA,UAClC;QAAW;UAAA;UAAA;UAAA;QAAA,QAAI,eAEhB;UAAA,wBAAG;YAAQ,OAAO,EAAE,IAAI,CAACtC,MAAO;YAAA,UAAC;UAEjC;YAAA;YAAA;YAAA;UAAA,QAAS,2CAAuC;QAAA;UAAA;UAAA;UAAA;QAAA,QAAI,eAEpD;UAAO,IAAI,EAAC,MAAM;UAAC,SAAS,EAAC,QAAQ;UACnC,QAAQ,EAAE,KAAM;UAChB,MAAM,EAAC,4DAA4D;UACnE,QAAQ,EAAEgC,GAAG,IAAI,IAAI,CAAC/B,QAAQ,CAAC+B,GAAG,CAAE;UACpC,GAAG,EAAEM,CAAC,IAAE,IAAI,CAACP,YAAY,GAAGO;QAAE;UAAA;UAAA;UAAA;QAAA,QAC9B;MAAA;QAAA;QAAA;QAAA;MAAA,QACG,eACP;QAAK,SAAS,EAAC,QAAQ;QAAA,UAAE,IAAI,CAAC/C,KAAK,CAACG;MAAM;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7C;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}