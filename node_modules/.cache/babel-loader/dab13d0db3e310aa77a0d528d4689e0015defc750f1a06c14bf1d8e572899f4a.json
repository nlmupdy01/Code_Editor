{"ast":null,"code":"// import React from \"react\";\n\n// class SaveCom extends React.Component {\n//     constructor(props) {\n//       super(props)\n\n//       const defaultFileType = \"json\"; \n//       this.fileNames = {\n//           json: \"states.json\",\n//         csv: \"states.csv\",\n//         text: \"states.txt\"\n//       }    \n//       this.state = {\n//         fileType: defaultFileType,\n//         fileDownloadUrl: null,\n//         status: \"\",\n//           data: [\n//             { state: \"Arizona\",        electors: 11 },\n//             { state: \"Florida\",        electors: 29 },\n//             { state: \"Iowa\",           electors:  6 },\n//             { state: \"Michigan\",       electors: 16 },\n//             { state: \"North Carolina\", electors: 15 },\n//             { state: \"Ohio\",           electors: 18 },\n//             { state: \"Pennsylvania\",   electors: 20 },\n//             { state: \"Wisconsin\",      electors: 10 },\n//         ]\n//       }\n//         this.changeFileType = this.changeFileType.bind(this);\n//         this.download = this.download.bind(this);\n//         this.upload = this.upload.bind(this);\n//         this.openFile = this.openFile.bind(this);\n//     }\n\n//     changeFileType (event) {\n//       const value = event.target.value;\n//         this.setState({fileType: value});\n//     }\n\n//     download (event) {\n//       event.preventDefault();\n//         // Prepare the file\n//       let output;\n//       if (this.state.fileType === \"json\") {\n//           output = JSON.stringify({states: this.state.data}, \n//             null, 4);\n//       } else if (this.state.fileType === \"csv\"){\n//         // Prepare data:\n//         let contents = [];\n//         contents.push ([\"State\", \"Electors\"]);\n//         this.state.data.forEach(row => {\n//             contents.push([row.state, row.electors])\n//         });\n//         output = this.makeCSV(contents);\n//       } else if (this.state.fileType === \"text\"){\n//         // Prepare data:\n//         output = '';\n//         this.state.data.forEach(row => {\n//             output += `${row.state}: ${row.electors}\\n`\n//         });\n//       }\n//       // Download it\n//       const blob = new Blob([output]);\n//       const fileDownloadUrl = URL.createObjectURL(blob);\n//       this.setState ({fileDownloadUrl: fileDownloadUrl}, \n//         () => {\n//           this.dofileDownload.click(); \n//           URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\n//           this.setState({fileDownloadUrl: \"\"})\n//       })    \n//     }\n\n//     /**\n//      * Function returns the content as a CSV string\n//      * See https://stackoverflow.com/a/20623188/64904\n//      * Parameter content:\n//      *   [\n//      *.     [header1, header2],\n//      *.     [data1, data2]\n//      *.     ...\n//      *.  ]\n//      * NB Does not support Date items\n//      */\n//     makeCSV (content) {\n//         let csv = '';\n//       content.forEach(value => {\n//           value.forEach((item, i) => {\n//           let innerValue = item === null ? '' : item.toString();\n//           let result = innerValue.replace(/\"/g, '\"\"');\n//           if (result.search(/(\"|,|\\n)/g) >= 0) {\n//             result = '\"' + result + '\"'\n//           }\n//           if (i > 0) {csv += ','}\n//           csv += result;\n//         })\n//           csv += '\\n';\n//         })\n//       return csv\n//     }\n\n//     upload() {\n//         event.preventDefault();\n//       this.dofileUpload.click()\n//     }\n\n//     /**\n//      * Process the file within the React app. We're NOT uploading it to the server!\n//      */\n//     openFile(evt) {\n//         let status = []; // Status output\n//         const fileObj = evt.target.files[0];\n//         const reader = new FileReader();\n\n//         let fileloaded = e => {\n//           // e.target.result is the file's content as text\n//           const fileContents = e.target.result;\n//           status.push(`File name: \"${fileObj.name}\". Length: ${fileContents.length} bytes.`);\n//           // Show first 80 characters of the file\n//           const first80char = fileContents.substring(0,80);\n//           status.push (`First 80 characters of the file:\\n${first80char}`)\n//           this.setState ({status: status.join(\"\\n\")})\n//         }\n\n//         // Mainline of the method\n//         fileloaded = fileloaded.bind(this);\n//         reader.onload = fileloaded;\n//         reader.readAsText(fileObj);  \n//     }\n\n//     render() {\n//       return (\n//         <div>\n//           <h2>2020 US Swing States</h2>\n//           <table>\n//             <thead>\n//             <tr><th>State</th><th>Electors</th></tr>\n//             </thead>\n//             <tbody>\n//             {this.state.data.map(item => (\n//               <tr key={item.state}>\n//                 <td>{item.state}</td><td>{item.electors}</td>\n//               </tr>\n//             ))}          \n//               </tbody>\n//           </table>\n//           <form>\n//             <span className=\"mr\">File type:</span>\n//             <select name=\"fileType\"\n//               onChange={this.changeFileType}\n//               value={this.state.fileType}\n//               className=\"mr\"\n//             >\n//               <option value=\"csv\">CSV</option>\n//               <option value=\"json\">JSON</option>\n//               <option value=\"text\">Text</option>\n//             </select>\n\n//             <button onClick={this.download}>\n//               Download the file!\n//             </button>\n\n//             <a className=\"hidden\"\n//                download={this.fileNames[this.state.fileType]}\n//                href={this.state.fileDownloadUrl}\n//                ref={e=>this.dofileDownload = e}\n//             >download it</a>\n\n//             <p><button onClick={this.upload}>\n//               Upload a file!\n//             </button> Only json, csv, and text files are ok.</p>\n\n//             <input type=\"file\" className=\"hidden\"\n//               multiple={false}\n//               accept=\".json,.csv,.txt,.text,application/json,text/csv,text/plain\"\n//               onChange={evt => this.openFile(evt)}\n//               ref={e=>this.dofileUpload = e}\n//             />\n//           </form>\n//           <pre className=\"status\">{this.state.status}</pre>\n//         </div>\n//         )\n//     }\n//   }","map":{"version":3,"names":[],"sources":["C:/Users/pc/Desktop/Code_editor-html-css-js/src/Component/CodeEditContainer.jsx"],"sourcesContent":["// import React from \"react\";\r\n\r\n\r\n// class SaveCom extends React.Component {\r\n//     constructor(props) {\r\n//       super(props)\r\n      \r\n//       const defaultFileType = \"json\"; \r\n//       this.fileNames = {\r\n//           json: \"states.json\",\r\n//         csv: \"states.csv\",\r\n//         text: \"states.txt\"\r\n//       }    \r\n//       this.state = {\r\n//         fileType: defaultFileType,\r\n//         fileDownloadUrl: null,\r\n//         status: \"\",\r\n//           data: [\r\n//             { state: \"Arizona\",        electors: 11 },\r\n//             { state: \"Florida\",        electors: 29 },\r\n//             { state: \"Iowa\",           electors:  6 },\r\n//             { state: \"Michigan\",       electors: 16 },\r\n//             { state: \"North Carolina\", electors: 15 },\r\n//             { state: \"Ohio\",           electors: 18 },\r\n//             { state: \"Pennsylvania\",   electors: 20 },\r\n//             { state: \"Wisconsin\",      electors: 10 },\r\n//         ]\r\n//       }\r\n//         this.changeFileType = this.changeFileType.bind(this);\r\n//         this.download = this.download.bind(this);\r\n//         this.upload = this.upload.bind(this);\r\n//         this.openFile = this.openFile.bind(this);\r\n//     }\r\n    \r\n//     changeFileType (event) {\r\n//       const value = event.target.value;\r\n//         this.setState({fileType: value});\r\n//     }\r\n    \r\n//     download (event) {\r\n//       event.preventDefault();\r\n//         // Prepare the file\r\n//       let output;\r\n//       if (this.state.fileType === \"json\") {\r\n//           output = JSON.stringify({states: this.state.data}, \r\n//             null, 4);\r\n//       } else if (this.state.fileType === \"csv\"){\r\n//         // Prepare data:\r\n//         let contents = [];\r\n//         contents.push ([\"State\", \"Electors\"]);\r\n//         this.state.data.forEach(row => {\r\n//             contents.push([row.state, row.electors])\r\n//         });\r\n//         output = this.makeCSV(contents);\r\n//       } else if (this.state.fileType === \"text\"){\r\n//         // Prepare data:\r\n//         output = '';\r\n//         this.state.data.forEach(row => {\r\n//             output += `${row.state}: ${row.electors}\\n`\r\n//         });\r\n//       }\r\n//       // Download it\r\n//       const blob = new Blob([output]);\r\n//       const fileDownloadUrl = URL.createObjectURL(blob);\r\n//       this.setState ({fileDownloadUrl: fileDownloadUrl}, \r\n//         () => {\r\n//           this.dofileDownload.click(); \r\n//           URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\r\n//           this.setState({fileDownloadUrl: \"\"})\r\n//       })    \r\n//     }\r\n  \r\n//     /**\r\n//      * Function returns the content as a CSV string\r\n//      * See https://stackoverflow.com/a/20623188/64904\r\n//      * Parameter content:\r\n//      *   [\r\n//      *.     [header1, header2],\r\n//      *.     [data1, data2]\r\n//      *.     ...\r\n//      *.  ]\r\n//      * NB Does not support Date items\r\n//      */\r\n//     makeCSV (content) {\r\n//         let csv = '';\r\n//       content.forEach(value => {\r\n//           value.forEach((item, i) => {\r\n//           let innerValue = item === null ? '' : item.toString();\r\n//           let result = innerValue.replace(/\"/g, '\"\"');\r\n//           if (result.search(/(\"|,|\\n)/g) >= 0) {\r\n//             result = '\"' + result + '\"'\r\n//           }\r\n//           if (i > 0) {csv += ','}\r\n//           csv += result;\r\n//         })\r\n//           csv += '\\n';\r\n//         })\r\n//       return csv\r\n//     }\r\n    \r\n//     upload() {\r\n//         event.preventDefault();\r\n//       this.dofileUpload.click()\r\n//     }\r\n    \r\n//     /**\r\n//      * Process the file within the React app. We're NOT uploading it to the server!\r\n//      */\r\n//     openFile(evt) {\r\n//         let status = []; // Status output\r\n//         const fileObj = evt.target.files[0];\r\n//         const reader = new FileReader();\r\n            \r\n//         let fileloaded = e => {\r\n//           // e.target.result is the file's content as text\r\n//           const fileContents = e.target.result;\r\n//           status.push(`File name: \"${fileObj.name}\". Length: ${fileContents.length} bytes.`);\r\n//           // Show first 80 characters of the file\r\n//           const first80char = fileContents.substring(0,80);\r\n//           status.push (`First 80 characters of the file:\\n${first80char}`)\r\n//           this.setState ({status: status.join(\"\\n\")})\r\n//         }\r\n        \r\n//         // Mainline of the method\r\n//         fileloaded = fileloaded.bind(this);\r\n//         reader.onload = fileloaded;\r\n//         reader.readAsText(fileObj);  \r\n//     }\r\n    \r\n//     render() {\r\n//       return (\r\n//         <div>\r\n//           <h2>2020 US Swing States</h2>\r\n//           <table>\r\n//             <thead>\r\n//             <tr><th>State</th><th>Electors</th></tr>\r\n//             </thead>\r\n//             <tbody>\r\n//             {this.state.data.map(item => (\r\n//               <tr key={item.state}>\r\n//                 <td>{item.state}</td><td>{item.electors}</td>\r\n//               </tr>\r\n//             ))}          \r\n//               </tbody>\r\n//           </table>\r\n//           <form>\r\n//             <span className=\"mr\">File type:</span>\r\n//             <select name=\"fileType\"\r\n//               onChange={this.changeFileType}\r\n//               value={this.state.fileType}\r\n//               className=\"mr\"\r\n//             >\r\n//               <option value=\"csv\">CSV</option>\r\n//               <option value=\"json\">JSON</option>\r\n//               <option value=\"text\">Text</option>\r\n//             </select>\r\n            \r\n//             <button onClick={this.download}>\r\n//               Download the file!\r\n//             </button>\r\n            \r\n//             <a className=\"hidden\"\r\n//                download={this.fileNames[this.state.fileType]}\r\n//                href={this.state.fileDownloadUrl}\r\n//                ref={e=>this.dofileDownload = e}\r\n//             >download it</a>\r\n            \r\n//             <p><button onClick={this.upload}>\r\n//               Upload a file!\r\n//             </button> Only json, csv, and text files are ok.</p>\r\n  \r\n//             <input type=\"file\" className=\"hidden\"\r\n//               multiple={false}\r\n//               accept=\".json,.csv,.txt,.text,application/json,text/csv,text/plain\"\r\n//               onChange={evt => this.openFile(evt)}\r\n//               ref={e=>this.dofileUpload = e}\r\n//             />\r\n//           </form>\r\n//           <pre className=\"status\">{this.state.status}</pre>\r\n//         </div>\r\n//         )\r\n//     }\r\n//   }\r\n  \r\n\r\n  "],"mappings":"AAAA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}