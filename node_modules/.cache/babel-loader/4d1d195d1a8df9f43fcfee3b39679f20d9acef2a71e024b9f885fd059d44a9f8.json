{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\Code_editor-html-css-js\\\\src\\\\Hook\\\\Savefile.js\";\nimport React from \"react\";\nimport * as FileSaver from \"file-saver\";\nimport * as HTML from \"html\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExportCSV = _ref => {\n  let {\n    csvData,\n    fileName\n  } = _ref;\n  const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n  const fileExtension = \".html\";\n  const exportToCSV = (csvData, fileName) => {\n    const ws = HTML.utils.json_to_sheet(csvData);\n    const wb = {\n      Sheets: {\n        data: ws\n      },\n      SheetNames: [\"data\"]\n    };\n    const excelBuffer = HTML.write(wb, {\n      bookType: \"html\",\n      type: \"array\"\n    });\n    const data = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" xlsx and file-saver testing \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => exportToCSV(csvData, fileName),\n      children: \"Export\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = ExportCSV;\nvar _c;\n$RefreshReg$(_c, \"ExportCSV\");","map":{"version":3,"names":["React","FileSaver","HTML","ExportCSV","csvData","fileName","fileType","fileExtension","exportToCSV","ws","utils","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","write","bookType","type","Blob","saveAs","e"],"sources":["C:/Users/pc/Desktop/Code_editor-html-css-js/src/Hook/Savefile.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport * as FileSaver from \"file-saver\";\r\n\r\nimport * as HTML from \"html\";\r\n\r\nexport const ExportCSV = ({ csvData, fileName }) => {\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".html\";\r\n  const exportToCSV = (csvData, fileName) => {\r\n    const ws = HTML.utils.json_to_sheet(csvData);\r\n\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n\r\n    const excelBuffer = HTML.write(wb, { bookType: \"html\", type: \"array\" });\r\n\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <p> xlsx and file-saver testing </p>\r\n      <button onClick={(e) => exportToCSV(csvData, fileName)}>Export</button>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,KAAKC,SAAS,MAAM,YAAY;AAEvC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC;AAAA;AAE7B,OAAO,MAAMC,SAAS,GAAG,QAA2B;EAAA,IAA1B;IAAEC,OAAO;IAAEC;EAAS,CAAC;EAC7C,MAAMC,QAAQ,GACZ,iFAAiF;EACnF,MAAMC,aAAa,GAAG,OAAO;EAC7B,MAAMC,WAAW,GAAG,CAACJ,OAAO,EAAEC,QAAQ,KAAK;IACzC,MAAMI,EAAE,GAAGP,IAAI,CAACQ,KAAK,CAACC,aAAa,CAACP,OAAO,CAAC;IAE5C,MAAMQ,EAAE,GAAG;MAAEC,MAAM,EAAE;QAAEC,IAAI,EAAEL;MAAG,CAAC;MAAEM,UAAU,EAAE,CAAC,MAAM;IAAE,CAAC;IAEzD,MAAMC,WAAW,GAAGd,IAAI,CAACe,KAAK,CAACL,EAAE,EAAE;MAAEM,QAAQ,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAQ,CAAC,CAAC;IAEvE,MAAML,IAAI,GAAG,IAAIM,IAAI,CAAC,CAACJ,WAAW,CAAC,EAAE;MAAEG,IAAI,EAAEb;IAAS,CAAC,CAAC;IAExDL,SAAS,CAACoB,MAAM,CAACP,IAAI,EAAET,QAAQ,GAAGE,aAAa,CAAC;EAClD,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,UAAG;IAA6B;MAAA;MAAA;MAAA;IAAA,QAAI,eACpC;MAAQ,OAAO,EAAGe,CAAC,IAAKd,WAAW,CAACJ,OAAO,EAAEC,QAAQ,CAAE;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,gBACtE;AAEP,CAAC;AAAC,KAtBWF,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}